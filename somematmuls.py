import numpy as np
import matplotlib.pyplot as plt

#d=[100,500,1000,1500,2000,3000,4000,5000]
#f_stream=[1.085e11,6.88e11,1.32e12,1.04e12,1.43e12,1.48e12,8.76e11,1.068e12]
#f_callback=[2.61e10,5.33e11,8.06e11,8.45e11,1.29e12,1.42e12,8.69e11,1.057e12]

d=[100,500,1000,2000,3000,4000,5000]
#fs = np.array([1.08232e+11,2.48594e+10,6.85403e+11,4.71497e+11,1.33326e+12,6.87559e+11,1.43708e+12,1.25409e+12,1.4815e+12,1.40767e+12,8.84272e+11,8.71032e+11,1.06236e+12,1.05251e+12]).reshape([-1,2])
#fs = np.array([1.67875e+11,3.37286e+10,2.67047e+12,1.35559e+12,3.33236e+12,2.7861e+12,3.93866e+12,3.51095e+12,4.2848e+12,4.07165e+12,4.47658e+12,4.37798e+12,4.45712e+12,4.40988e+12]).reshape([-1,2])
fs = np.array([1.65617e+11,4.32057e+10,1.81389e+11,2.66489e+12,1.27184e+12,2.70542e+12,3.34055e+12,2.78991e+12,3.28863e+12,3.93586e+12,3.50107e+12,3.99192e+12,4.29864e+12,4.09363e+12,4.29946e+12,4.44754e+12,4.36529e+12,4.46224e+12,4.45159e+12,4.40004e+12,4.45149e+12]).reshape([-1,3])

f_stream = fs[:,0]
f_callback = fs[:,1]
f_cudagraph = fs[:,2]

vs = np.array
vs = np.power(vs, 1/3) + np.random.randn(len(vs))*20

plt.plot(d, f_stream,'-x', label="streams")
plt.plot(d, f_callback, '-x', label="callback")
plt.plot(d, f_cudagraph, '-x', label="cudagraph")
#plt.plot(vs, np.random.rand(len(vs))*1e12, 'x')

#plt.xlabel("Dimension Size\n(flops^1/3)")
plt.xlabel("Dimension Size")
plt.ylabel("Flops (f32)")
plt.title("Sequence of square matrix multiply")

plt.legend()

plt.show()
